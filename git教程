一 下载安装
    1.下载地址：https://git-for-windows.github.io
    
    2.设置名字和Email地址
      $ git config --global user.name "Your Name"
      $ git config --global user.email "email@example.com"
      
二 创建版本库
    1.创建一个空目录：$ mkdir learngit
    
    2.进入此目录：$ cd learngit
    
    3.显示当前路径命令：$ pwd
    
    4.把这个目录变成Git可以管理的仓库：$ git init
    
    5.下载Notepad++(下载地址：https://notepad-plus-plus.org/)代替记事本
    
      Notepad++的默认编码设置为UTF-8 without BOM
      
    6.在learngit文件夹下新建一个readme.txt
    
      内容：
      Git is a version control system.
      Git is free software.
      
    7.将工作区文件添加到暂存区：$ git add readme.txt
    
    8.将暂存区文件添加到版本库：$ git commit -m "wrote a readme file"
    
三 时光机穿梭

    1.继续修改readme.txt文件
        内容：
        Git is a distributed version control system.
        Git is free software.
        
    2.运行命令查看结果：$ git status
    
    3.查看对readme.txt的修改内容：$ git diff readme.txt 
    
    4.$ git add readme.txt
    
    5.$ git status
    
    6.$ git commit -m "add distributed"
    
    7.$ git status

四 版本回退
    
    1.继续修改readme.txt文件
        内容：
        Git is a distributed version control system.
        Git is free software distributed under the GPL.
        
    2.  $ git add readme.txt
        $ git commit -m "append GPL"
    
    3.打印修改的历史记录：$ git log
      只打印commit id（版本号）：$ git log --pretty=oneline
      
    4.把当前版本“append GPL”回退到上一个版本“add distributed”：$ git reset --hard HEAD^
    
    5.看看readme.txt的内容是不是版本add distributed：$ cat readme.txt
    
    6.再看看现在版本库的状态：$ git log
    
    7.指定回到未来的某个版本：$ git reset --hard  e0d9792
        同时readme.txt内容会变化，得重新保存
        
    8.再看看readme.txt的内容：$ cat readme.txt
    
    9.记录你的每一次命令：$ git reflog
    
五 工作区和暂存区和版本库

    1.工作区：learngit文件夹
    
    2.暂存区：git add的地方
    
    3.版本库：包括暂存区和master
    
    4.再练习一遍，先对readme.txt做个修改
        内容：
        Git is a distributed version control system.
        Git is free software distributed under the GPL.
        Git has a mutable index called stage.
    
    5.在工作区新增一个LICENSE文本文件（内容随便写）
    
    6.先用git status查看一下状态：$ git status
    
    7.把readme.txt和LICENSE都添加到暂存区：$ git add .
    
    8.用git status再查看一下：$ git status
    
    9.执行git commit就可以一次性把暂存区的所有修改提交到分支:$ git commit -m "understand how stage works"
    
    10.$ git status
        暂存区就没有任何内容了
        
六 管理修改

    1.对readme.txt做一个修改，添加一行： Git tracks changes.
                     
    2.然后，添加：$ git add readme.txt
                 $ git status
    
    3.然后，再修改readme.txt，添加一行：Git tracks changes of files.
        
    
    4.提交：$ git commit -m "git tracks changes"
    
    5.提交后，再看看状态：$ git status
    
    6.可以查看工作区和版本库里面最新版本的区别：$ git diff HEAD -- readme.txt 

七 撤销修改

    1.你在readme.txt中添加了一行：My stupid boss still prefers SVN.
    
    2.把readme.txt文件在工作区的修改全部撤销：$ git checkout -- readme.txt
    
    3.把暂存区的修改撤销掉（unstage），重新放回工作区：$ git reset HEAD readme.txt
        现在暂存区是干净的，工作区有修改
        
    4.丢弃工作区的修改：$ git checkout -- readme.txt
 
 八 远程仓库
    
    1.注册GitHub账号
    
    2.本地Git仓库和GitHub仓库之间的传输是通过SSH加密的
      需要一点设置：
      
        第1步：创建SSH Key。
        在用户主目录下，看看有没有.ssh目录：
        先执行以下语句来判断是否已经存在本地公钥：
        cat ~/.ssh/id_rsa.pub
        如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，
        
            如果已经有了，可直接跳到下一步。可以用命令：ssh -T git@github.com检查是否链接成功
            
            如果没有，打开Shell（Windows下打开Git Bash），

            创建SSH Key：$ ssh-keygen -t rsa -C "youremail@example.com"

            你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。

            如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，

            不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。 
        
        第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：

             然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：
       
             点“Add Key”，你就应该看到已经添加的Key：
             
     3.git上传文件夹以及文件到github有两种方法
     
            第一种：(麻烦不推荐）
            
                 1.首先必须在github上创建一个远程库learngit（仓库的名字===最外层文件夹名字）
            
                 2.把一个已有的本地仓库与之关联：git remote add origin git@github.com:yousi2016/learngit.git
                 (如果有错误一般用：git remote rm origin或者git pull origin master）
                       
                 3.git add .
            
                 4.git commit -m             
            
                 5.第一次把本地库的所有内容推送到远程库上：git push -u origin master
            
                 6.以后每次都git push origin maste
                 
             第二种：（推荐）
                   1.首先必须在github上创建一个远程库learngit
                   
                   2.将远程库clone到本地：git clone https://github.com/yousi2016/learngit.git
                   
                   3.然后将项目文件夹放到本地工作区中
                   
                   4.git add .
                   
                   5.git commit -m
                   
                   6.git push origin master
                   
             
     4.从远程库克隆
     
            1.现在，假设我们从零开发，那么最好的方式是先创建远程库，然后，从远程库克隆。

            首先，登陆GitHub，创建一个新的仓库，名字叫gitskills：
            
            2.现在，远程库已经准备好了，下一步是用命令git clone克隆一个本地库：
                $ git clone git@github.com:michaelliao/gitskills.git
                注意把Git库的地址换成你自己的，然后进入gitskills目录看看，已经有README.md文件了。
                $ cd gitskills
                $ ls
九分支管理
    1.创建与合并分支
        1.首先，我们创建dev分支，然后切换到dev分支：$ git checkout -b dev
        
        2.查看当前分支：$ git branch
        
        3.然后，我们就可以在dev分支上正常提交，比如对readme.txt做个修改，加上一行： Creating a new branch is quick.
        
        4.  $ git add readme.txt 
            $ git commit -m "branch test"
            
        5. 现在，dev分支的工作完成，我们就可以切换回master分支：$ git checkout master
        
        6.现在，我们把dev分支的工作成果合并到master分支上：$ git merge dev
        
        7.合并完成后，就可以放心地删除dev分支了：$ git branch -d dev
        
        8.删除后，查看branch，就只剩下master分支了：$ git branch
        


            

           
        
        
    
    

    
    
    
