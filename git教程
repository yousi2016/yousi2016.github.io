一 下载安装
    1.下载地址：https://git-for-windows.github.io
    
    2.设置名字和Email地址
      $ git config --global user.name "Your Name"
      $ git config --global user.email "email@example.com"
      
二 创建版本库
    1.创建一个空目录：$ mkdir learngit
    
    2.进入此目录：$ cd learngit
    
    3.显示当前路径命令：$ pwd
    
    4.把这个目录变成Git可以管理的仓库：$ git init
    
    5.下载Notepad++(下载地址：https://notepad-plus-plus.org/)代替记事本
    
      Notepad++的默认编码设置为UTF-8 without BOM
      
    6.在learngit文件夹下新建一个readme.txt
    
      内容：
      Git is a version control system.
      Git is free software.
      
    7.将工作区文件添加到暂存区：$ git add readme.txt
    
    8.将暂存区文件添加到版本库：$ git commit -m "wrote a readme file"
    
三 时光机穿梭

    1.继续修改readme.txt文件
        内容：
        Git is a distributed version control system.
        Git is free software.
        
    2.运行命令查看结果：$ git status
    
    3.查看对readme.txt的修改内容：$ git diff readme.txt 
    
    4.$ git add readme.txt
    
    5.$ git status
    
    6.$ git commit -m "add distributed"
    
    7.$ git status

四 版本回退
    
    1.继续修改readme.txt文件
        内容：
        Git is a distributed version control system.
        Git is free software distributed under the GPL.
        
    2.  $ git add readme.txt
        $ git commit -m "append GPL"
    
    3.打印修改的历史记录：$ git log
      只打印commit id（版本号）：$ git log --pretty=oneline
      
    4.把当前版本“append GPL”回退到上一个版本“add distributed”：$ git reset --hard HEAD^
    
    5.看看readme.txt的内容是不是版本add distributed：$ cat readme.txt
    
    6.再看看现在版本库的状态：$ git log
    
    7.指定回到未来的某个版本：$ git reset --hard  e0d9792
        同时readme.txt内容会变化，得重新保存
        
    8.再看看readme.txt的内容：$ cat readme.txt
    
    9.记录你的每一次命令：$ git reflog
    
五 工作区和暂存区和版本库

    1.工作区：learngit文件夹
    
    2.暂存区：git add的地方
    
    3.版本库：包括暂存区和master
    
    4.再练习一遍，先对readme.txt做个修改
        内容：
        Git is a distributed version control system.
        Git is free software distributed under the GPL.
        Git has a mutable index called stage.
    
    5.在工作区新增一个LICENSE文本文件（内容随便写）
    
    6.先用git status查看一下状态：$ git status
    
    7.把readme.txt和LICENSE都添加到暂存区：$ git add .
    
    8.用git status再查看一下：$ git status
    
    9.执行git commit就可以一次性把暂存区的所有修改提交到分支:$ git commit -m "understand how stage works"
    
    10.$ git status
        暂存区就没有任何内容了
        
六 管理修改

    1.对readme.txt做一个修改，添加一行： Git tracks changes.
                     
    2.然后，添加：$ git add readme.txt
                 $ git status
    
    3.然后，再修改readme.txt，添加一行：Git tracks changes of files.
        
    
    4.提交：$ git commit -m "git tracks changes"
    
    5.提交后，再看看状态：$ git status
    
    6.可以查看工作区和版本库里面最新版本的区别：$ git diff HEAD -- readme.txt 

七 撤销修改

    1.你在readme.txt中添加了一行：My stupid boss still prefers SVN.
    
    2.把readme.txt文件在工作区的修改全部撤销：$ git checkout -- readme.txt
    
    3.把暂存区的修改撤销掉（unstage），重新放回工作区：$ git reset HEAD readme.txt
        现在暂存区是干净的，工作区有修改
        
    4.丢弃工作区的修改：$ git checkout -- readme.txt
 
 八 远程仓库
    
    1.注册GitHub账号
    
    2.本地Git仓库和GitHub仓库之间的传输是通过SSH加密的
      需要一点设置：
      
        第1步：创建SSH Key。
        在用户主目录下，看看有没有.ssh目录：
        先执行以下语句来判断是否已经存在本地公钥：
        cat ~/.ssh/id_rsa.pub
        如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，
        
            如果已经有了，可直接跳到下一步。可以用命令：ssh -T git@github.com检查是否链接成功
            如果显示：Warning: Permanently added the RSA host key for IP address '13.229.188.59' to the list of known hosts.
            Hi yousi2016! You've successfully authenticated, but GitHub does not provide shell access.
            说明已经连接成功
           
            如果没有，打开Shell（Windows下打开Git Bash），

            创建SSH Key：$ ssh-keygen -t rsa -C "youremail@example.com"

            你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。

            如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，

            不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。 
        
        第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：

             然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：
       
             点“Add Key”，你就应该看到已经添加的Key：
             
     3.git上传文件夹以及文件到github有两种方法
     
            第一种：(麻烦不推荐）
            
                 1.首先必须在github上创建一个远程库learngit（仓库的名字===最外层文件夹名字）
            
                 2.把一个已有的本地仓库与之关联：git remote add origin git@github.com:yousi2016/learngit.git
                 (如果有错误一般用：git remote rm origin或者git pull origin master）
                       
                 3.git add .
            
                 4.git commit -m             
            
                 5.第一次把本地库的所有内容推送到远程库上：git push -u origin master
            
                 6.以后每次都git push origin maste
                 
             第二种：（推荐）
                   1.首先必须在github上创建一个远程库learngit
                   
                   2.将远程库clone到本地：git clone https://github.com/yousi2016/learngit.git
                   
                   3.然后将项目文件夹放到本地工作区中
                   
                   4.git add .
                   
                   5.git commit -m
                   
                   6.git push origin master
                   
             
     4.从远程库克隆
     
            1.现在，假设我们从零开发，那么最好的方式是先创建远程库，然后，从远程库克隆。

            首先，登陆GitHub，创建一个新的仓库，名字叫gitskills：
            
            2.现在，远程库已经准备好了，下一步是用命令git clone克隆一个本地库：
                $ git clone git@github.com:michaelliao/gitskills.git
                注意把Git库的地址换成你自己的，然后进入gitskills目录看看，已经有README.md文件了。
                $ cd gitskills
                $ ls
九分支管理
    1.创建与合并分支
        1.首先，我们创建dev分支，然后切换到dev分支：$ git checkout -b dev
        
        2.查看当前分支：$ git branch
        
        3.然后，我们就可以在dev分支上正常提交，比如对readme.txt做个修改，加上一行： Creating a new branch is quick.
        
        4.  $ git add readme.txt 
            $ git commit -m "branch test"
            
        5. 现在，dev分支的工作完成，我们就可以切换回master分支：$ git checkout master
        
        6.现在，我们把dev分支的工作成果合并到master分支上：$ git merge dev
        
        7.合并完成后，就可以放心地删除dev分支了：$ git branch -d dev
        
        8.删除后，查看branch，就只剩下master分支了：$ git branch
        
十标签管理
   
    发布一个版本时，我们通常先在版本库中打一个标签（tag），这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。

    Git的标签虽然是版本库的快照，但其实它就是指向某个commit的指针（跟分支很像对不对？但是分支可以移动，标签不能移动），所以，创建和删除标签都是瞬间完成的。

    Git有commit，为什么还要引入tag？

    “请把上周一的那个版本打包发布，commit号是6a5819e...”

    “一串乱七八糟的数字不好找！”

    如果换一个办法：

    “请把上周一的那个版本打包发布，版本号是v1.2”

    “好的，按照tag v1.2查找commit就行！”

    所以，tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起。
    1.创建标签
         在Git中打标签非常简单，首先，切换到需要打标签的分支上：
             $ git branch
            * dev
              master
            $ git checkout master
            Switched to branch 'master'
          然后，敲命令git tag <name>就可以打一个新标签：
            $ git tag v1.0
          可以用命令git tag查看所有标签：
            $ git tag
            v1.0
          默认标签是打在最新提交的commit上的。有时候，如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？
          方法是找到历史提交的commit id，然后打上就可以了：
          
            $ git log --pretty=oneline --abbrev-commit
            6a5819e merged bug fix 101
            cc17032 fix bug 101
            7825a50 merge with no-ff
            6224937 add merge
            59bc1cb conflict fixed
            400b400 & simple
            75a857c AND simple
            fec145a branch test
            d17efd8 remove test.txt
          比方说要对add merge这次提交打标签，它对应的commit id是6224937，敲入命令：
            $ git tag v0.9 6224937
          再用命令git tag查看标签：
            $ git tag
            v0.9
            v1.0
          注意，标签不是按时间顺序列出，而是按字母排序的。可以用git show <tagname>查看标签信息：
            $ git show v0.9
            commit 622493706ab447b6bb37e4e2a2f276a20fed2ab4
            Author: Michael Liao <askxuefeng@gmail.com>
            Date:   Thu Aug 22 11:22:08 2013 +0800

                add merge
            ...
          可以看到，v0.9确实打在add merge这次提交上。

          还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：
             $ git tag -a v0.1 -m "version 0.1 released" 3628164
          
          用命令git show <tagname>可以看到说明文字：
                $ git show v0.1
                tag v0.1
                Tagger: Michael Liao <askxuefeng@gmail.com>
                Date:   Mon Aug 26 07:28:11 2013 +0800

                version 0.1 released

                commit 3628164fb26d48395383f8f31179f24e0882e1e0
                Author: Michael Liao <askxuefeng@gmail.com>
                Date:   Tue Aug 20 15:11:49 2013 +0800

                    append GPL
             
        还可以通过-s用私钥签名一个标签：

        $ git tag -s v0.2 -m "signed version 0.2 released" fec145a
        
        
        签名采用PGP签名，因此，必须首先安装gpg（GnuPG），如果没有找到gpg，或者没有gpg密钥对，就会报错：

        gpg: signing failed: secret key not available
        error: gpg failed to sign the data
        error: unable to sign the tag
        如果报错，请参考GnuPG帮助文档配置Key。

        用命令git show <tagname>可以看到PGP签名信息：

        $ git show v0.2
        tag v0.2
        Tagger: Michael Liao <askxuefeng@gmail.com>
        Date:   Mon Aug 26 07:28:33 2013 +0800

        signed version 0.2 released
        -----BEGIN PGP SIGNATURE-----
        Version: GnuPG v1.4.12 (Darwin)

        iQEcBAABAgAGBQJSGpMhAAoJEPUxHyDAhBpT4QQIAKeHfR3bo...
        -----END PGP SIGNATURE-----

        commit fec145accd63cdc9ed95a2f557ea0658a2a6537f
        Author: Michael Liao <askxuefeng@gmail.com>
        Date:   Thu Aug 22 10:37:30 2013 +0800

            branch test
        用PGP签名的标签是不可伪造的，因为可以验证PGP签名。验证签名的方法比较复杂，这里就不介绍了。
        
    2.操作标签
        如果标签打错了，也可以删除：

        $ git tag -d v0.1
        Deleted tag 'v0.1' (was e078af9)
        因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。

        如果要推送某个标签到远程，使用命令git push origin <tagname>：

        $ git push origin v1.0
        Total 0 (delta 0), reused 0 (delta 0)
        To git@github.com:michaelliao/learngit.git
         * [new tag]         v1.0 -> v1.0
        或者，一次性推送全部尚未推送到远程的本地标签：

        $ git push origin --tags
        Counting objects: 1, done.
        Writing objects: 100% (1/1), 554 bytes, done.
        Total 1 (delta 0), reused 0 (delta 0)
        To git@github.com:michaelliao/learngit.git
         * [new tag]         v0.2 -> v0.2
         * [new tag]         v0.9 -> v0.9
        如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：

        $ git tag -d v0.9
        Deleted tag 'v0.9' (was 6224937)
        然后，从远程删除。删除命令也是push，但是格式如下：

        $ git push origin :refs/tags/v0.9
        To git@github.com:michaelliao/learngit.git
         - [deleted]         v0.9
        要看看是否真的从远程库删除了标签，可以登陆GitHub查看。
        
        
     3.使用GitHub
            我们一直用GitHub作为免费的远程仓库，如果是个人的开源项目，放到GitHub上是完全没有问题的。其实GitHub还是一个开源协作社区，通过GitHub，既可以让别人参与你的开源项目，也可以参与别人的开源项目。

            在GitHub出现以前，开源项目开源容易，但让广大人民群众参与进来比较困难，因为要参与，就要提交代码，而给每个想提交代码的群众都开一个账号那是不现实的，因此，群众也仅限于报个bug，即使能改掉bug，也只能把diff文件用邮件发过去，很不方便。

            但是在GitHub上，利用Git极其强大的克隆和分支功能，广大人民群众真正可以第一次自由参与各种开源项目了。

            如何参与一个开源项目呢？比如人气极高的bootstrap项目，这是一个非常强大的CSS框架，你可以访问它的项目主页https://github.com/twbs/bootstrap，点“Fork”就在自己的账号下克隆了一个bootstrap仓库，然后，从自己的账号下clone：

            git clone git@github.com:michaelliao/bootstrap.git
            一定要从自己的账号下clone仓库，这样你才能推送修改。如果从bootstrap的作者的仓库地址git@github.com:twbs/bootstrap.git克隆，因为没有权限，你将不能推送修改。

            Bootstrap的官方仓库twbs/bootstrap、你在GitHub上克隆的仓库my/bootstrap，以及你自己克隆到本地电脑的仓库，他们的关系就像下图显示的那样：

            github-repos

            如果你想修复bootstrap的一个bug，或者新增一个功能，立刻就可以开始干活，干完后，往自己的仓库推送。

            如果你希望bootstrap的官方库能接受你的修改，你就可以在GitHub上发起一个pull request。当然，对方是否接受你的pull request就不一定了。

            如果你没能力修改bootstrap，但又想要试一把pull request，那就Fork一下我的仓库：https://github.com/michaelliao/learngit，创建一个your-github-id.txt的文本文件，写点自己学习Git的心得，然后推送一个pull request给我，我会视心情而定是否接受。

            小结

            在GitHub上，可以任意Fork开源仓库；

            自己拥有Fork后的仓库的读写权限；

            可以推送pull request给官方仓库来贡献代码。
            
        4.使用码云
            使用GitHub时，国内的用户经常遇到的问题是访问速度太慢，有时候还会出现无法连接的情况（原因你懂的）。

            如果我们希望体验Git飞一般的速度，可以使用国内的Git托管服务——码云（gitee.com）。

            和GitHub相比，码云也提供免费的Git仓库。此外，还集成了代码质量检测、项目演示等功能。对于团队协作开发，码云还提供了项目管理、代码托管、文档管理的服务，5人以下小团队免费。

             码云的免费版本也提供私有库功能，只是有5人的成员上限。
            使用码云和使用GitHub类似，我们在码云上注册账号并登录后，需要先上传自己的SSH公钥。选择右上角用户头像 -> 菜单“修改资料”，然后选择“SSH公钥”，填写一个便于识别的标题，然后把用户主目录下的.ssh/id_rsa.pub文件的内容粘贴进去：
            
            点击“确定”即可完成并看到刚才添加的Key：

            如果我们已经有了一个本地的git仓库（例如，一个名为learngit的本地库），如何把它关联到码云的远程库上呢？

            首先，我们在码云上创建一个新的项目，选择右上角用户头像 -> 菜单“控制面板”，然后点击“创建项目”：
            
            项目名称最好与本地库保持一致：

            然后，我们在本地库上使用命令git remote add把它和码云的远程库关联：

            git remote add origin git@gitee.com:liaoxuefeng/learngit.git
            之后，就可以正常地用git push和git pull推送了！

            如果在使用命令git remote add时报错：

            git remote add origin git@gitee.com:liaoxuefeng/learngit.git
            fatal: remote origin already exists.
            这说明本地库已经关联了一个名叫origin的远程库，此时，可以先用git remote -v查看远程库信息：

            git remote -v
            origin    git@github.com:michaelliao/learngit.git (fetch)
            origin    git@github.com:michaelliao/learngit.git (push)
            可以看到，本地库已经关联了origin的远程库，并且，该远程库指向GitHub。

            我们可以删除已有的GitHub远程库：

            git remote rm origin
            再关联码云的远程库（注意路径中需要填写正确的用户名）：

            git remote add origin git@gitee.com:liaoxuefeng/learngit.git
            此时，我们再查看远程库信息：

            git remote -v
            origin    git@gitee.com:liaoxuefeng/learngit.git (fetch)
            origin    git@gitee.com:liaoxuefeng/learngit.git (push)
            现在可以看到，origin已经被关联到码云的远程库了。通过git push命令就可以把本地库推送到Gitee上。

            有的小伙伴又要问了，一个本地库能不能既关联GitHub，又关联码云呢？

            答案是肯定的，因为git本身是分布式版本控制系统，可以同步到另外一个远程库，当然也可以同步到另外两个远程库。

            使用多个远程库时，我们要注意，git给远程库起的默认名称是origin，如果有多个远程库，我们需要用不同的名称来标识不同的远程库。

            仍然以learngit本地库为例，我们先删除已关联的名为origin的远程库：

            git remote rm origin
            然后，先关联GitHub的远程库：

            git remote add github git@github.com:michaelliao/learngit.git
            注意，远程库的名称叫github，不叫origin了。

            接着，再关联码云的远程库：

            git remote add gitee git@gitee.com:liaoxuefeng/learngit.git
            同样注意，远程库的名称叫gitee，不叫origin。

            现在，我们用git remote -v查看远程库信息，可以看到两个远程库：

            git remote -v
            gitee    git@gitee.com:liaoxuefeng/learngit.git (fetch)
            gitee    git@gitee.com:liaoxuefeng/learngit.git (push)
            github    git@github.com:michaelliao/learngit.git (fetch)
            github    git@github.com:michaelliao/learngit.git (push)
            如果要推送到GitHub，使用命令：

            git push github master
            如果要推送到码云，使用命令：

            git push gitee master
            这样一来，我们的本地库就可以同时与多个远程库互相同步：

            multi-remote

            码云也同样提供了Pull request功能，可以让其他小伙伴参与到开源项目中来。你可以通过Fork我的仓库：https://gitee.com/liaoxuefeng/learngit，创建一个your-gitee-id.txt的文本文件，
            写点自己学习Git的心得，然后推送一个pull request给我，这个仓库会在码云和GitHub做双向同步
        
    
    

    
    
    
